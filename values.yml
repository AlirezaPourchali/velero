configuration:
  backupStorageLocation: 
  - name: minio-aws
    provider: aws 
    bucket: "velero2" 
    default:
    config:
      region: minio
      s3ForcePathStyle: "true"
      s3Url: http://minio.velero.svc:9000
  volumeSnapshotLocation:
  - name: snapshotname2 
    provider: "volume_snapshot_provider2" 
#cleanUpCRDs: true

initContainers:
  # - name: velero-plugin-for-csi
  #   image: velero/velero-plugin-for-csi:v0.5.0
  #   imagePullPolicy: IfNotPresent
  #   volumeMounts:
  #     - mountPath: /target
  #       name: plugins
  - name: velero-plugin-for-aws
    image: velero/velero-plugin-for-aws:v1.7.0
    imagePullPolicy: IfNotPresent
    volumeMounts:
      - mountPath: /target
        name: plugins

rbac:
  # Whether to create the Velero role and role binding to give all permissions to the namespace to Velero.
  create: true
  # Whether to create the cluster role binding to give administrator permissions to Velero
  clusterAdministrator: true
  # Name of the ClusterRole.
  #clusterAdministratorName: cluster-admin
serviceAccount:
  server:
    create: true
    name: #velero-sa
    annotations:
    labels:
credentials:  
  secretContents: 
    cloud: |
      [default]
      aws_access_key_id=minio 
      aws_secret_access_key=minio123
snapshotsEnabled: fales
deployNodeAgent: true
# IMP
upgradeCRDs: false

nodeAgent:
  podVolumePath: /var/lib/kubelet/pods
  privileged: false
  # Pod priority class name to use for the node-agent daemonset. Optional.
  priorityClassName: ""
  # Resource requests/limits to specify for the node-agent daemonset deployment. Optional.
  # https://velero.io/docs/v1.6/customize-installation/#customize-resource-requests-and-limits
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi

resources:
  requests:
    cpu: 500m
    memory: 128Mi
  limits:
    cpu: 1000m
    memory: 512Mi
# liveness probe
livenessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# Readiness probe of the pod
readinessProbe:
  httpGet:
    path: /metrics
    port: http-monitoring
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5    

#nodeSelector: 
#  nodeclass: platform
#tolerations: 
##  - key: nodeclass
##    operator: "Equal"
##    value : "platform-storage"
#  - key: nodeclass
#    operator: "Equal"
#    value : "platform"
#affinity: {}